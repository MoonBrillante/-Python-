import urllib.request
def download(url,num_retries=2):
    print('Downloading:',url)
    try:
        html=urllib.request.urlopen(url).read()
    except urllib.request.URLError as e:
          print('Download error:',e.reason)
          html = None
          if num_retries >0:
              if hasattr(e, 'code') and 500<=e.code<600:
                  # recursively retry 5xx HTTP errors
                  return download(url, num_retries-1)
    return html
          
print(download("http://httpstat.us/500"))

改进， 添加用用户代理

import urllib.request
def download(url, user_agent = 'wawp', num_retries = 2):
    print('Downloading:', url)
    headers = {'User-agent': user_agent}
    request = urllib.request.Request(url,headers = headers )
    try:
            html = urllib.request.urlopen(request).read()
    except urllib.request.URLError as e:
            print('Download error:', e.reason)
            html = None
            if num_retries > 0:
                  if hasattr(e, 'code') and 500 <= e.code< 600:
                     # retry 5XX HTTP erors
                     return download(url, user_agent, num_retries-1)
    return html

print(download('http://example.webscraping.com'))


爬网站地图
import re  # re是正则表达式的库文件

def crawl_sitemap(url):
    # download the sitemap file
    sitemap = download(url)
    # extract the sitemap links
    links = re.findall('<loc>(.*?)</loc>', sitemap)
    # download each link
    for link in links:
        # scrape html here
        # ...
        html = download(link)
print(crawl_sitemap('http://example.webscraping.com/sitemap.xml'))


ID遍历爬虫
import itertools
# maximum number of consecutive download errors allowed
max_errors = 5

# current number of consecutive download errors
num_errors = 0
for page in itertools.count(1):
  url = 'http://example.webscraping.com/view/-%d' % page
  html = download(url)
  if html is None:
    # received an error trying to download tis webpage
    num_errors += 1
    if num_errors == max_errors:
      # reached maximum number of
      # consecutive errors so exit
      break
    else:
      # success - can scrape the result
      # ...
      num_errors = 0
